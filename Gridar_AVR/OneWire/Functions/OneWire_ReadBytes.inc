/*
* Принимает два аргумента
* 1 - Метку, указывающую на начало строки. Фукция возьмет адрес метки в памяти
* 2 - Количество байт для чтения и записи в строку
* По выходу получим область памяти с данными по адресу метки
* Если проверка целостности данных пройдет с ошибкой, то
* данные из памяти будут удалены
*/
.macro OneWireReadBytes

	push zh								; вталкиваем zh в STACK
	push zl								; вталкиваем zl в STACK
	push r18							; вталкиваем r18 в STACK

	ldi zh, high(@0)					; записываем старший байт адреса данной области памяти
	ldi zl, low(@0)						; записываем младший байт адреса данной области памяти
	ldi r18, @1							; количество байт для записи
	_call OneWireReadBytes_act			; переходим
	OneWireCRCCheck @1					; проверка правильности получения данных
	pop r18								; выталкиваем r18 из STACK
	pop zl								; выталкиваем zl из STACK
	pop zh								; выталкиваем zh из STACK

.endm
//____________________________________________________________________________________
//____________________________________________________________________________________
OneWireReadBytes_act:

	push r16									; вталкиваем r16 в STACK
	push r17									; вталкиваем r17 в STACK
	push r19									; вталкиваем r19 в STACK
	clr r16										; сюда записываем данные сдвига
	ldi r17, $08								; количество бит для чтения
	OneWireReadROMCode_:
		OneWireReadBit							; прочитали бит, он в Т
		READ_REG SREG, r19						; копируем SREG в r19
		sbrs r19, 6								; проверяем Т
		clc										; очищаем С
		sbrc r19, 6								; проверяем Т
		sec										; устанавливаем С
		ror r16									; сдвигаем r16 вправо
		dec r17									; уменьшаем количество бит для чтения
		brne OneWireReadROMCode_				; если r17 не равно 0
		st z+, r16								; записываем r16 по адресу памяти с пре-декрементом
		ldi r17, $08							; количество бит для чтения
		dec r18									; уменьшаем количество байт для записи
		brne OneWireReadROMCode_				; если r18 не равно 0

	OneWireRead64Bits_act_finish:
		pop r19									; выталкиваем r19 из STACK
		pop r17									; выталкиваем r17 из STACK
		pop r16									; выталкиваем r16 из STACK

ret
